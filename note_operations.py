from sqlalchemy.exc import SQLAlchemyError
from datetime import datetime
from colorama import Fore
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

from utils.date_validator import compare_dates, format_date
from utils.status import check_status, display_note_status
from models.note import Note
from models.user import User
from user_operations import current_user_info


def create_note(
        current_session,
        username: str,
        title: str,
        content: str,
        status: str,
        issue_date: datetime,
) -> Note | None:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏.
    """

    current_user = current_session.query(User).filter(User.username == username).first()
    if not current_user:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω. ‚ö†Ô∏è")
        return None

    comment = compare_dates(issue_date, status)

    current_note = Note(
        title=title,
        content=content,
        status=status,
        issue_date=issue_date,
        comment=comment,
        user_id=current_user.id,
    )

    current_session.add(current_note)
    current_session.commit()
    print(f"–ó–∞–º–µ—Ç–∫–∞ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}'. ‚úÖ")
    return current_note


def get_notes(current_session, username: str) -> list:
    """
    –í—ã–≤–æ–¥ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        current_user = current_session.query(User).filter_by(username=username).first()
        if not current_user:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º {username} –Ω–µ –Ω–∞–π–¥–µ–Ω. ‚ö†Ô∏è")
            return []
        notes = current_session.query(Note).filter_by(user_id=current_user.id).all()
        if not notes:
            print(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫. ‚ö†Ô∏è")
            return []

        print(f"–ó–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}:")
        print("-" * 40)
        # –í—ã–≤–æ–¥–∏–º –∫–∞–∂–¥—É—é –∑–∞–º–µ—Ç–∫—É
        for one_note in notes:
            print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {one_note.title}")
            print(f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {one_note.content}")
            print(f"–°—Ç–∞—Ç—É—Å: {display_note_status(one_note.status)}")
            print(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {one_note.created_date}")
            print(f"–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {one_note.issue_date}")
            print(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {one_note.comment}")
            print("-" * 40)

        return notes

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–æ–∫: {e} ‚ùå")
        return []

    finally:
        current_session.close()


def display_notes_paginated(current_session) -> str | None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫.
    –ö–∞–∂–¥–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ 3 –∑–∞–º–µ—Ç–æ–∫.
    """
    notes = current_session.query(Note).all()

    if not notes:
        print("–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. ‚ö†Ô∏è")
        return

    page_size = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    current_page = 0  # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    while True:
        start_index = current_page * page_size
        end_index = start_index + page_size
        page_notes = notes[start_index:end_index]

        if not page_notes:
            print("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞. ‚ö†Ô∏è")
            break

        print(f"\n=== –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}/{(len(notes) + page_size - 1) // page_size} ===")
        for index, note in enumerate(page_notes, start=start_index + 1):
            print(f"{index}. {note.title} ‚Äî {display_note_status(note.status)} ‚Äî {note.issue_date}")

        print("\n[N] ‚Äî –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.")
        print("[P] ‚Äî –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.")
        print("[Q] ‚Äî –í—ã—Ö–æ–¥.")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip().upper()

        if choice == "N":
            if end_index >= len(notes):
                print("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞. ‚ö†Ô∏è")
            else:
                current_page += 1
        elif choice == "P":
            if current_page == 0:
                print("–≠—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞. ‚ö†Ô∏è")
            else:
                current_page -= 1
        elif choice == "Q":
            print("–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞. üëã")
            break
        else:
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. ‚ùå")


def update_note_status(current_session, username: str, note_name: str, new_status: str) -> None:
    """
    –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–º–µ—Ç–∫–∏.
    """
    try:
        current_note = current_user_info(current_session, username, note_name)

        if not current_note:
            print(f"–ó–∞–º–µ—Ç–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º {note_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}. ‚ö†Ô∏è")
            return

        current_note.status = new_status
        current_session.commit()
        print(f"–°—Ç–∞—Ç—É—Å –∑–∞–º–µ—Ç–∫–∏ '{note_name}' –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{display_note_status(new_status)}'. ‚úÖ")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–º–µ—Ç–∫–∏: {e} ‚ùå")

    finally:
        current_session.close()


def check_reminders(current_session) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ç—ë–∫—à–∏—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    """
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫
        notes = current_session.query(Note).all()
        if not notes:
            print("–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. ‚ö†Ô∏è")
            return

        reminders = []
        current_date = datetime.now()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤
        for note in notes:
            issue_date = note.issue_date
            if issue_date < current_date:
                reminders.append(note)

        # –í—ã–≤–æ–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        if reminders:
            print("\n=== –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ===\n")
            for note in reminders:
                print(f"–ó–∞–º–µ—Ç–∫–∞: {note.title}")
                print(f"–î–µ–¥–ª–∞–π–Ω: {note.issue_date} (–∏—Å—Ç—ë–∫)\n")
        else:
            print("\n=== –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ===\n")
            print("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ù–µ—Ç –∏—Å—Ç—ë–∫—à–∏—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤. ‚úÖ")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e} ‚ùå")

    finally:
        current_session.close()


def edit_note(current_session, username: str) -> None:
    """
    –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –ø–æ–ª—è –∑–∞–º–µ—Ç–∫–∏.
    """
    current_user = current_session.query(User).filter_by(username=username).first()
    if not current_user:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º {username} –Ω–µ –Ω–∞–π–¥–µ–Ω. ‚ö†Ô∏è")
        return

    notes = current_session.query(Note).filter_by(user_id=current_user.id).all()
    if not notes:
        print(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫. ‚ö†Ô∏è")
        return

    print(f"–ó–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}:")
    for index, note in enumerate(notes, start=1):
        print(f"{index}. {note.title}")

    try:
        note_number = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: "))
        if note_number < 1 or note_number > len(notes):
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏. ‚ö†Ô∏è")
            return
    except ValueError:
        print("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    selected_note = notes[note_number - 1]
    print(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–º–µ—Ç–∫—É: {selected_note.title}")

    fields = {
        "title": "–ó–∞–≥–æ–ª–æ–≤–æ–∫:",
        "content": "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:",
        "status": "–°—Ç–∞—Ç—É—Å:",
        "issue_date": "–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):",
    }

    for field, description in fields.items():
        # status field
        if field == "status":
            current_value = getattr(selected_note, field)
            while True:
                new_value = input(f"{description} (—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {display_note_status(current_value)}) "
                                  f"(–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ")
                if not new_value.strip():
                    break
                try:
                    check_status(new_value)
                    setattr(selected_note, field, new_value.strip())
                    break
                except ValueError as e:
                    print(e, "‚ùå")

        # issue_date field
        elif field == "issue_date":
            current_value = getattr(selected_note, field)
            while True:
                new_value = input(f"{description} (—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value}) (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ")
                if not new_value.strip():
                    break
                try:
                    parsed_date = format_date(new_value)
                    setattr(selected_note, field, parsed_date)
                    break
                except ValueError as e:
                    print(e, "‚ùå")

        # other fields
        else:
            current_value = getattr(selected_note, field)
            new_value = input(f"{description} (—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value}) (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ")
            if new_value.strip():
                setattr(selected_note, field, new_value.strip())

    try:
        current_session.commit()
        print(Fore.GREEN + "–£—Å–ø–µ—Ö" + "‚úÖ")
    except SQLAlchemyError as e:
        current_session.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e} ‚ùå")


def search_notes(session, keyword: str = "", status: str = ""):
    """
    –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    query = session.query(Note)

    if keyword:
        query = query.filter(
            (Note.title.contains(keyword)) | (Note.content.contains(keyword))
        )

    if status:
        query = query.filter(Note.status == status)

    results = query.all()

    if results:
        print("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏:")
        for note in results:
            print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {note.title}, –°—Ç–∞—Ç—É—Å: {display_note_status(note.status)}, –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {note.content}")
    else:
        print("–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–∏—Å–∫–∞. ‚ö†Ô∏è")


def filter_notes(current_session, filter_type: int, filter_value: str) -> list:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    query = current_session.query(Note)

    # –ü–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
    if filter_type == 1:
        return query.filter(Note.title.ilike(f"%{filter_value}%") | Note.content.ilike(f"%{filter_value}%")).all()
    # –ü–æ —Å—Ç–∞—Ç—É—Å—É
    elif filter_type == 2:
        return query.filter(Note.status.ilike(filter_value)).all()
    # –ü–æ –¥–∞—Ç–µ
    elif filter_type == 3:
        try:
            filter_date = datetime.strptime(filter_value, "%Y-%m-%d")
            return query.filter(Note.issue_date == filter_date).all()
        except ValueError:
            print("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. ‚ö†Ô∏è")
            return []
    else:
        print("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞. ‚ö†Ô∏è")
        return []


def export_notes_to_file(current_session, export_format: str) -> bool | None:
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –≤ .txt –∏–ª–∏ .pdf —Ñ–∞–π–ª.
    """
    notes = current_session.query(Note).all()
    if not notes:
        print("–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. ‚ö†Ô∏è")
        return

    # –í —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    if export_format.lower() == "txt":
        try:
            file_path = "../exports/notes_export.txt"
            with open(file_path, "w", encoding="utf-8") as file:
                for note in notes:
                    file.write(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {note.title}\n")
                    file.write(f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {note.content}\n")
                    file.write(f"–°—Ç–∞—Ç—É—Å: {note.status}\n")
                    file.write(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {note.created_date}\n")
                    file.write(f"–î–µ–¥–ª–∞–π–Ω: {note.issue_date}\n")
                    file.write("=" * 50 + "\n")
            print(f"–ó–∞–º–µ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {file_path} ‚úÖ")
            return True

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ TXT: {e} ‚ùå")

    # –í pdf
    elif export_format.lower() == "pdf":
        file_path = "../exports/notes_export.pdf"
        try:
            pdf = canvas.Canvas(file_path, pagesize=A4)
            width, height = A4
            margin = 40
            y_position = height - margin

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            pdfmetrics.registerFont(TTFont('ArialBold', 'arialbd.ttf'))
            pdf.setFont("ArialBold", 16)
            pdf.drawString(margin, y_position, "–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫")
            y_position -= 30

            # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            pdfmetrics.registerFont(TTFont('Arial', 'arial.ttf'))
            pdf.setFont("Arial", 12)
            for note in notes:
                if y_position < margin:
                    pdf.showPage()
                    y_position = height - margin

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–º–µ—Ç–∫–µ
                pdf.drawString(margin, y_position, f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {note.title}")
                y_position -= 15
                pdf.drawString(margin, y_position, f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {note.content}")
                y_position -= 15
                pdf.drawString(margin, y_position, f"–°—Ç–∞—Ç—É—Å: {note.status}")
                y_position -= 15
                pdf.drawString(margin, y_position, f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {note.comment}")
                y_position -= 15
                pdf.drawString(margin, y_position, f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {note.created_date}")
                y_position -= 15
                pdf.drawString(margin, y_position, f"–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {note.issue_date}")
                y_position -= 30

            pdf.save()
            print(f"–ó–∞–º–µ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ PDF: {file_path} ‚úÖ")
            return True

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ PDF: {e} ‚ùå")

    else:
        return False


def delete_note(current_session, username: str, note_name: str) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        current_note = current_user_info(current_session, username, note_name)

        if not current_note:
            print(f"–ó–∞–º–µ—Ç–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º {note_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}. ‚ö†Ô∏è")
            return

        current_session.delete(current_note)
        current_session.commit()
        print(f"–ó–∞–º–µ—Ç–∫–∞ '{note_name}' —É–¥–∞–ª–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}. ‚úÖ")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {e} ‚ùå")

    finally:
        current_session.close()
